/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelGUI.employeeGUI;

import HSMcontrollers.employeeController;
import HSMmodel.maintenance;
import dbConnexion.SQLiteJDBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Noria Soumbou, jermaine anderson
 */
public class MaintenanceDutiesPanel extends javax.swing.JPanel {
    
    final private SQLiteJDBConnection db = new SQLiteJDBConnection();
    final private employeeController clocktime = new employeeController();

    /**
     * Creates new form MaintenanceDutiesPanel
     */
    public MaintenanceDutiesPanel() {
        initComponents();
        show_maintenance();
    }
    
    //Grab data from database
    public ArrayList<maintenance> maintenanceList(){
        ArrayList<maintenance> maintenanceList = new ArrayList<maintenance>();
        
        String sql = "SELECT * FROM maintenance";
            Connection conn = db.connect();
                    try {
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                        maintenance maintenance;
                            while (rs.next()) {
                                if(rs.getString("status").equalsIgnoreCase("Fixed")|rs.getString("status").equalsIgnoreCase("Not Fixed")){
                                maintenance = new maintenance(rs.getInt("idRoom"),rs.getString("type"),rs.getString("description"),rs.getString("status"));
                                maintenanceList.add(maintenance);
                                }
                            }
                    } catch (SQLException e ) {
                        System.out.println(e.getMessage()); 
                      } 

        return maintenanceList;
    }
    
    //Show Data in JTable
    public void show_maintenance(){
        ArrayList<maintenance> list = maintenanceList();
        DefaultTableModel model = (DefaultTableModel)tableDuties.getModel();
        Object [] row = new Object[4];

            for(int i =0; i<list.size(); i++){
                row [0] = list.get(i).getRoomNumber();
                row [1] = list.get(i).getType();
                row [2] = list.get(i).getIssue();
                row [3] = list.get(i).getStatus();
                
                model.addRow(row);
            }
    }
    
    public void deleteFromTable(){
    // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)tableDuties.getModel();
        int viewIndex = tableDuties.getSelectedRow();
        int roomnumbervalue = (int )tableDuties.getModel().getValueAt(viewIndex, 0);
        String sql1 = "DELETE FROM maintenance WHERE idRoom= ? ";
        try (Connection conn = db.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql1)){
            pstmt.setInt(1, roomnumbervalue);
            pstmt.executeUpdate();
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            }
        //Resfresh
        model.setRowCount(0);
        show_maintenance();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel11 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableDuties = new javax.swing.JTable();
        txtChangeStatus = new javax.swing.JLabel();
        buttonFixed = new javax.swing.JButton();

        tableDuties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Number", "Type", "Issue", "Fixed Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tableDuties);

        txtChangeStatus.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        txtChangeStatus.setText("Change Status:");

        buttonFixed.setText("Fixed");
        buttonFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFixedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1275, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtChangeStatus)
                            .addComponent(buttonFixed))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtChangeStatus)
                .addGap(18, 18, 18)
                .addComponent(buttonFixed)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1295, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 4, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 4, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonFixedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFixedActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableDuties.getModel();
        int viewIndex = tableDuties.getSelectedRow();
        int roomnumbervalue = (int )tableDuties.getModel().getValueAt(viewIndex, 0);
        String statusvalue = "Fixed";

        
         String sql1 = "UPDATE maintenance SET status = ?"+" WHERE idRoom= ?";

        try (Connection conn = db.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql1)){
            pstmt.setString(1, statusvalue);
            pstmt.setInt(2, roomnumbervalue);
            pstmt.executeUpdate();
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            }

        //Resfresh
        model.setRowCount(0);
        show_maintenance();   

    }//GEN-LAST:event_buttonFixedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFixed;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable tableDuties;
    private javax.swing.JLabel txtChangeStatus;
    // End of variables declaration//GEN-END:variables
}
